PART
{


// --- general parameters ---
	name = SmallEscapeTowerHGR
	module = Part
	author = Orion

// --- asset parameters ---
	mesh = model.mu
	scale = 1
	rescaleFactor = 1

	node_stack_bottom = 0.0, -0.004, 0.0, 0.0, -1.0, 0.0, 0

// --- FX definitions ---

	fx_exhaustFlame_yellow_small = 0.0, -0.17, 0.163, 0.0, 1.0, 0.0, running
	fx_smokeTrail_medium = 0.0, -11.2673, 0.0, 0.0, 1.0, 0.0, running


// --- Sound FX definition ---

	sound_vent_medium = engage
	sound_rocket_hard = running
	sound_vent_soft = disengage
	sound_decoupler_fire = decouple

// --- editor parameters ---
	TechRequired = survivability
	entryCost = 1100
	cost = 300
	category = Utility
	subcategory = 0
	title = Small Escape Tower
	manufacturer = Home Grown Rocket Parts
	description = A small tower with a few tiny Solid rockets at the end. Should be able to pull a pod away from disaster during ascent.
// attachment rules: stack, srfAttach, allowStack, allowSrfAttach, allowCollision
	attachRules = 1,0,1,0,0

// --- standard part parameters ---
	mass = 0.1
	dragModelType = default
	maximum_drag = 0.3
	minimum_drag = 0.2
	angularDrag = 2
	crashTolerance = 7
	maxTemp = 3600
	bulkheadProfiles = size0
	ActivatesEvenIfDisconnected = true

	stagingIcon = SOLID_BOOSTER
	MODULE
	{
		name = ModuleEngines
		thrustVectorTransformName = thrustTransform
		throttleLocked = True
		exhaustDamage = False
		allowShutdown = False
		ignitionThreshold = 0.1
		minThrust = 0
		maxThrust = 164
		heatProduction = 550
		fxOffset = 0, 0, 0.02
		PROPELLANT
		{
			name = SolidFuel
			ratio = 1.0
			DrawGauge = True
		}
		atmosphereCurve
		{
			key = 0 100
			key = 1 100
		}
	
	}


	RESOURCE
	{
		name = SolidFuel
		amount = 30
		maxAmount = 30
	}

	MODULE
	{
		name = ModuleDecouple
		ejectionForce = 50
		explosiveNodeID = bottom
	}
	tags = hgr mercury gemini abort booster emergency explo ?les l.e.s malfunc ?rud safe solid surviv
	MODULE
	{
		name = ModuleTestSubject
		useStaging = True
		useEvent = False
		useProgressForBodies = False
		usePrestigeForSit = False
		CONSTRAINT
		{
			type = SITUATION
			value = 28
			body = _Home
		}
		CONSTRAINT
		{
			type = SITUATION
			value = 0
			body = _NotHome
		}
		CONSTRAINT
		{
			type = REPEATABILITY
			value = ALWAYS
		}
		CONSTRAINT
		{
			type = ALTITUDE
			test = LT
			value = 300000
			situationMask = 16
		}
		CONSTRAINT
		{
			type = ALTITUDE
			test = GT
			value = 10000
			situationMask = 8
			prestige = Trivial
		}
		CONSTRAINT
		{
			type = ALTITUDE
			test = LT
			value = 40000
			situationMask = 8
			prestige = Trivial
		}
		CONSTRAINT
		{
			type = ALTITUDE
			test = GT
			value = 5000
			situationMask = 8
			prestige = Significant
		}
		CONSTRAINT
		{
			type = ALTITUDE
			test = LT
			value = 100000
			situationMask = 8
			prestige = Significant
		}
		CONSTRAINT
		{
			type = ALTITUDE
			test = GT
			value = 0
			situationMask = 8
			prestige = Exceptional
		}
		CONSTRAINT
		{
			type = SPEED
			test = GT
			value = 300
			situationMask = 8
			prestige = Trivial
		}
		CONSTRAINT
		{
			type = SPEED
			test = LT
			value = 1200
			situationMask = 8
			prestige = Trivial
		}
		CONSTRAINT
		{
			type = SPEED
			test = GT
			value = 600
			situationMask = 8
			prestige = Significant
		}
		CONSTRAINT
		{
			type = SPEED
			test = LT
			value = 1500
			situationMask = 8
			prestige = Significant
		}
		CONSTRAINT
		{
			type = SPEED
			test = GT
			value = 900
			situationMask = 8
			prestige = Exceptional
		}
		CONSTRAINT
		{
			type = SPEED
			test = LT
			value = 2500
			situationMask = 8
			prestige = Exceptional
		}
		CONSTRAINT
		{
			type = ALTITUDEENV
			test = GT
			value = 2000
			prestige = Trivial
		}
		CONSTRAINT
		{
			type = ALTITUDEENV
			test = LT
			value = 4000
			prestige = Trivial
		}
		CONSTRAINT
		{
			type = ALTITUDEENV
			test = GT
			value = 1000
			prestige = Significant
		}
		CONSTRAINT
		{
			type = ALTITUDEENV
			test = LT
			value = 2000
			prestige = Significant
		}
		CONSTRAINT
		{
			type = ALTITUDEENV
			test = GT
			value = 500
			prestige = Exceptional
		}
		CONSTRAINT
		{
			type = ALTITUDEENV
			test = LT
			value = 1000
			prestige = Exceptional
		}
		CONSTRAINT
		{
			type = SPEEDENV
			test = LT
			value = 200
			prestige = Trivial
		}
		CONSTRAINT
		{
			type = SPEEDENV
			test = GT
			value = 100
			prestige = Trivial
		}
		CONSTRAINT
		{
			type = SPEEDENV
			test = LT
			value = 100
			prestige = Significant
		}
		CONSTRAINT
		{
			type = SPEEDENV
			test = GT
			value = 50
			prestige = Significant
		}
		CONSTRAINT
		{
			type = SPEEDENV
			test = LT
			value = 50
			prestige = Exceptional
		}
		CONSTRAINT
		{
			type = SPEEDENV
			test = GT
			value = 20
			prestige = Exceptional
		}
	}
}
